# 数据源集合
dataSources:
  ds_0:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.cj.jdbc.Driver
    jdbcUrl: jdbc:mysql://127.0.0.1:3306/link?useUnicode=true&characterEncoding=UTF-8&rewriteBatchedStatements=true&allowMultiQueries=true&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai
    username: root
    password: 6y7u8i9o@cn

rules:
  - !SHARDING
    tables:
      t_link:
        # 真实数据节点，比如数据库源以及数据库在数据库中真实存在的
        actualDataNodes: ds_0.t_link_${0..15}
        # 分表策略
        tableStrategy:
          # 用于单分片键的标准分片场景
          standard:
            # 分片键
            shardingColumn: gid
            # 分片算法，对应 rules[0].shardingAlgorithms
            shardingAlgorithmName: link_table_hash_mod
      # t_link-goto 是一个 gid 与 full_short_url 的路由表
      # 路由表的出现,就是因为在实现 短链接与原链接 跳转关系的时候, 考虑到访问短链接肯定不用带上gid,那么就是直接根据full_short_url进行查询了
      # 这样就会发生读扩散的情况,大大影响数据库查询效率
      # 设置一个路由表,路由表分片键为full_short_url,这样就完成一一对应的映射
      t_link_goto:
        actualDataNodes: ds_0.t_link_goto_${0..15}
        tableStrategy:
          standard:
            shardingColumn: full_short_url
            shardingAlgorithmName: link_goto_table_hash_mod
    # 分片算法
    shardingAlgorithms:
      # 数据表分片算法
      link_table_hash_mod:
        # 根据分片键 Hash 分片
        type: HASH_MOD
        # 分片数量
        props:
          sharding-count: 16
      link_goto_table_hash_mod:
        type: HASH_MOD
        props:
          sharding-count: 16
# 展现逻辑 SQL & 真实 SQL
props:
  sql-show: true