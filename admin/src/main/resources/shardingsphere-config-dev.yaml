# 数据源集合
dataSources:
  ds_0:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.cj.jdbc.Driver
    jdbcUrl: jdbc:mysql://127.0.0.1:3306/link?useUnicode=true&characterEncoding=UTF-8&rewriteBatchedStatements=true&allowPublicKeyRetrieval=true&allowMultiQueries=true&serverTimezone=Asia/Shanghai
    username: root
    password: 

rules:
  - !SHARDING
    tables:
      t_user:
        # 真实数据节点，比如数据库源以及数据库在数据库中真实存在的
        actualDataNodes: ds_0.t_user_${0..15}
        # 分表策略
        tableStrategy:
          # 用于单分片键的标准分片场景
          standard:
            # 分片键
            shardingColumn: username
            # 分片算法，对应 rules[0].shardingAlgorithms
            shardingAlgorithmName: user_table_hash_mod
      # group 表也分片，因为默认一个用户最多10个分组，每个用户默认就有一个分组，
      # 所以group只可能比user多，实际业务中group分表也肯定远不止16个，这里只是模拟一下
      t_group:
        actualDataNodes: ds_0.t_group_${0..15}
        tableStrategy:
          standard:
            # 分片键
            # 为什么 group 分片键是 username
            # 划分分片键，一看分片是否能将数据按算法均匀分开，二看分片键对SQL语句的性能，例如这里不选id或gid，id肯定是不用想了，因为日常业务的查询中几乎用不到id字段
            # 那为什么不用gid呢，因为 `获取短链接分组集合` 的接口是根据 username 来查询的，如果选用gid作为分片键就会出现读扩散的情况，这样会大大影响查询性能，加大数据库的负担
            shardingColumn: username
            shardingAlgorithmName: group_table_hash_mod
    # 分片算法
    shardingAlgorithms:
      # 数据表分片算法
      user_table_hash_mod:
        # 根据分片键 Hash 分片
        type: HASH_MOD
        # 分片数量
        props:
          sharding-count: 16
      group_table_hash_mod:
        type: HASH_MOD
        props:
          sharding-count: 16
  # 数据加密存储规则
  - !ENCRYPT
    # 需要加密的表集合
    tables:
      # 用户表
      t_user:
        # 用户表中哪些字段需要进行加密
        columns:
          # 手机号字段，逻辑字段，不一定是在数据库中真实存在
          phone:
            # 手机号字段存储的密文字段，这个是数据库中真实存在的字段
            cipherColumn: phone
            # 身份证字段加密算法
            encryptorName: common_encryptor
          mail:
            cipherColumn: mail
            encryptorName: common_encryptor
        # 是否按照密文字段查询
        queryWithCipherColumn: true
    # 加密算法
    encryptors:
      # 自定义加密算法名称
      common_encryptor:
        # 加密算法类型
        type: AES
        props:
          # AES 加密密钥
          aes-key-value: d6oadClrrb9A3GWo
# 展现逻辑 SQL & 真实 SQL
props:
  sql-show: true
